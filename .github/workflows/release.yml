name: Release

on:
  workflow_call:
    inputs:
      staging-branch:
        required: false
        type: string
    secrets:
      NPM_TOKEN:
        required: false
      DEV_AUTH0_CLIENT_ID:
        required: true
      DEV_AUTH0_DOMAIN:
        required: true
      DEV_AUTH0_AUDIENCE:
        required: true
      PROD_AUTH0_CLIENT_ID:
        required: true
      PROD_AUTH0_DOMAIN:
        required: true
      PROD_AUTH0_AUDIENCE:
        required: true

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: pnpm

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Set environment variables for development
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "Setting up development environment"
          echo "AUTH0_CLIENT_ID=${{ secrets.DEV_AUTH0_CLIENT_ID }}" >> $GITHUB_ENV
          echo "AUTH0_DOMAIN=${{ secrets.DEV_AUTH0_DOMAIN }}" >> $GITHUB_ENV
          echo "AUTH0_AUDIENCE=${{ secrets.DEV_AUTH0_AUDIENCE }}" >> $GITHUB_ENV

      - name: Set environment variables for production
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "Setting up production environment"
          echo "AUTH0_CLIENT_ID=${{ secrets.PROD_AUTH0_CLIENT_ID }}" >> $GITHUB_ENV
          echo "AUTH0_DOMAIN=${{ secrets.PROD_AUTH0_DOMAIN }}" >> $GITHUB_ENV
          echo "AUTH0_AUDIENCE=${{ secrets.PROD_AUTH0_AUDIENCE }}" >> $GITHUB_ENV

      - name: Create AUTH0_CONFIG file
        run: |
          echo "export const AUTH0_CONFIG = {
            clientId: '${{ env.AUTH0_CLIENT_ID }}',
            domain: '${{ env.AUTH0_DOMAIN }}',
            audience: '${{ env.AUTH0_AUDIENCE }}',
          };" > src/auth0-config.ts

      - name: Build Project
        run: pnpm build

      # If no NPM_TOKEN secret exists, just handle regular versioning
      - name: (No NPM) Create Release Pull Request
        uses: changesets/action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ env.NPM_TOKEN == null && inputs.staging-branch != github.ref_name }}

      # If NPM_TOKEN secret exists, release to npm
      # First, create a .npmrc file to make sure we're respecting the existing ones
      - name: Create .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: env.NPM_TOKEN != null

      # If the branch is the staging branch, deploy with specific version (requires defining a pnpm release:staging script that calls changeset version)
      - name: (Staging) Create Release Pull Request and Publish to npm
        id: changesets-staging
        uses: changesets/action@v1
        with:
          version: pnpm version:staging
          publish: pnpm release:staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ env.NPM_TOKEN != null && inputs.staging-branch == github.ref_name }}

      # If the branch is production, deploy as usual
      - name: (Production) Create Release Pull Request and Publish to npm
        id: changesets-production
        uses: changesets/action@v1
        with:
          publish: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ env.NPM_TOKEN != null && inputs.staging-branch != github.ref_name }}
